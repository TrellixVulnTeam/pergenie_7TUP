# coding: utf-8

import sys, os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(os.path.join(BASE_DIR, 'lib'))


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',

    'apps.landing',
    'apps.authentication',
    'apps.dashboard',
    'apps.genome',

    'apps.templatetags',
    'apps.gwascatalog'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'pergenie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pergenie.wsgi.application'

SITE_ID = 1  # the current site in the django_site database table


# Session

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_SAVE_EVERY_REQUEST = True  # Default: False
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = False


# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    },
}

# MongoDB
MONGO_HOST = "localhost"
MONGO_PORT = 27017
MONGO_USER = ""
MONGO_PASSWORD = ""
MONGO_URI = "mongodb://" + MONGO_HOST + ":" + str(MONGO_PORT)

# Celery
BROKER_URL = 'amqp://{USER}:{PASSWORD}@{HOST}:{PORT}//'.format(USER='guest',
                                                               PASSWORD='guest',
                                                               HOST='localhost',
                                                               PORT=5672)
CELERY_RESULT_BACKEND = 'amqp'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


# Internationalization

LANGUAGE_CODE = 'en'  # 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True  # load the internationalization machinery
USE_L10N = True  # format dates, numbers and calendars according to the current locale
USE_TZ = True    # use timezone-aware datetimes

LANGUAGES = (
    ('en', u'English'),
    ('ja', u'日本語'),
)


# Static files (CSS, JavaScript, Images)

STATIC_URL = '/static/'  # URL prefix for static files.

STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)


# Logging

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}


# Authentication

AUTH_USER_MODEL = 'authentication.User'
LOGIN_URL = '/login/'
MIN_PASSWORD_LENGTH = 14

ACCOUNT_ACTIVATION_KYE_EXPIRE_HOURS= 24
ACCOUNT_ACTIVATION_KEY_LENGTH = 40


# Test

TEST_DATA_DIR = os.path.join(BASE_DIR, 'test', 'data')


# Application settings


# Genome upload/delete/status

MAX_UPLOAD_GENOME_FILE_NAME_LENGTH = 255
MAX_UPLOAD_GENOME_FILE_SIZE = 2 * (1024 ** 3)  # == 2Gbytes. 100Mbytes: 1024**2 == 104857600, 1Gbytes: 1024**3
MAX_UPLOAD_GENOMEFILE_COUNT = 100

UPLOAD_DIR = '/tmp/pergenie'

# UPDATE_SPAN = 30  # update if last riskreport is older than this days.

# GWAS Catalog
# GWASCATALOG_URL = 'http://www.genome.gov/admin/gwascatalog.txt'
# GWASCATALOG_INFO_URL = 'http://www.genome.gov/Pages/About/OD/OPG/GWAS%20Catalog/Tab_delimited_column_descriptions_09_27.pdf'

#
# PATH_TO_ENG2JA = os.path.join(BASE_DIR, 'data', 'gwascatalog.traits.translated.tsv.csv')
# PATH_TO_DISEASE2WIKI = os.path.join(BASE_DIR, 'data', 'disease2wiki.json')

# demo user
# DEMO_USER_ID = 'demo@pergenie.org'
# RESERVED_USER_ID = [TEST_USER_ID, TEST_DUMMY_USER_ID, DEMO_USER_ID]

# TEST_23ANDME_FILE = os.path.join(BASE_DIR, 'lib/mongo/parser/test/test.23andme.txt')
# TEST_VCF40_FILE = os.path.join(BASE_DIR, 'lib/mongo/parser/test/test.vcf40.vcf')


# Gmail
# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'username@hostname'
# EMAIL_HOST_PASSWORD = ''
# EMAIL_PORT = 587

# Outlook
# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp-mail.outlook.com'
# EMAIL_HOST_USER = 'username@hostname'
# EMAIL_HOST_PASSWORD = ''
# EMAIL_PORT = 587

# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# 23andMe API
# CLIENT_ID = ""
# CLIENT_SECRET = ""
# CALLBACK_URL = ""
# SCOPE_RS_LIST = []
# SCOPE = "basic names" + " ".join(SCOPE_RS_LIST)

# Large reference files
# LARGE_REFERENCE_DIR = ''
# PATH_TO_REFERENCE_FASTA = os.path.join(LARGE_REFERENCE_DIR, 'human_g1k_v37.fasta')
# REFGENOME_VERSION = 'GRCh37/hg19'
# REFGENOME_LINK = 'http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/human/index.shtml#GRCh37'
# PATH_TO_DBSNP = os.path.join(LARGE_REFERENCE_DIR, 'dbsnp_137.b37.vcf')
# DBSNP_VERSION = 'B137'
# STRAND_DB_DIR = os.path.join(LARGE_REFERENCE_DIR, 'Genotyping_chips_strand_and_build_files/www.well.ox.ac.uk/~wrayner/strand')
# BIOQ_DIR = os.path.join(LARGE_REFERENCE_DIR, 'bioq', 'B137')

# #
# PATH_TO_REFFLAT = os.path.join(BASE_DIR, 'data', 'large_dbs', 'ucsc_refFlat', 'refFlat.txt')
# PATH_TO_INTERVAL_LIST_DIR = os.path.join(BASE_DIR, 'data', 'large_dbs', 'interval_lists')

# OMIM
# PATH_TO_OMIMTXT = os.path.join(BASE_DIR, 'data', 'large_dbs', 'OMIM', 'omim.txt')
# OMIM_APIKEY = ''
# PATH_TO_MIM2GENE = os.path.join(BASE_DIR, 'data', 'large_dbs', 'OMIM', 'mim2gene.txt')

#
# PATH_TO_POPULATION_PCA = os.path.join(BASE_DIR, 'data', 'large_dbs', 'population_pca')


# PDB
# PATH_TO_PDB = os.path.join(LARGE_REFERENCE_DIR, 'pdb')
# RSYNC_PDB = True


# demo data
# DEMO_23ANDME_GENOME_EU_M = {'name': os.path.join(LARGE_REFERENCE_DIR, 'demo_data', 'genome_Greg_Mendel.txt'),
#                             'population': 'European',
#                             'file_format': 'andme'}
# DEMO_23ANDME_GENOME_EU_F = {'name': os.path.join(LARGE_REFERENCE_DIR, 'demo_data', 'genome_Lilly_Mendel.txt'),
#                             'population': 'European',
#                             'file_format': 'andme'}
# TOMITA_GENOME = {'name': os.path.join(LARGE_REFERENCE_DIR, 'demo_data', 'DRA000583.bwa.gatk.vcf'),
#                  'population': 'Japanese',
#                  'file_format': 'vcf'}


# GENOME_FILE_FORMAT_LONG_NAME_MAP = {
#     'vcf': 'VCF (Whole Genome)',
#     'andme': '23andMe'
# }

# GENOME_FILE_FORMAT_EXTENTION_MAP = {
#     'vcf': '*.vcf',
#     'andme': '*.txt'
# }

# GENOME_FILE_FORMAT_SHORT_NAME_MAP = {
#     'vcf': 'wg',
#     'andme': 'andme'
# }

# GENOME_FILE_FORMAT_REGION_FILE_MAP = {
#     'vcf': '',
#     'andme': 'andme_region'
# }

    # {'name': 'vcf_exome_truseq',
    #  'extention': '*.vcf',
    #  'long_name': 'VCF (TruSeq Exome)',
    #  'short_name': 'truseq',
    #  'region_file': 'TruSeq-Exome-Targeted-Regions-BED-file'},


# if True, all the samples in vcf will be imported,
# otherwise, only 1st sample will be imported.
# MULTI_SAMPLE_VCF = False


## Genome data cron job

# CRON_DIRS = {}  # set {'username': ['/path/to/datadir']}

# DEFAULT_POPULATION = 'unknown'

#
# INT_CHROMS = [i + 1 for i in range(22)]


# FIXME:
# BACKUP_DIR = BASE_DIR

#
# IS_DEMO_ONLY = False

#
# GWASCATALOG_INCONSISTENCE_THRS = 0.3
